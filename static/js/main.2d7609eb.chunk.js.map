{"version":3,"sources":["components/mdb-navbar.js","components/mdb-block.js","components/mdb-container.js","components/mdb-footer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","componentDidMount","state","collapse","isWideEnough","onClick","bind","this","setState","optsMDBNavbarNavLinks","optsMDBNavbarNavButtons","config","mdbNavbarNav","mdbCarousel","optsMDBNavbar","mdbNavbar","optsMDBView","mdbView","optsMDBMask","mdbMask","attributes","innerTextHTMLMDBMask","innerTextHTML","forEach","string","displayIntro","innerNavbarNavLinks","innerNavbarNavButtons","innerNavbarNavLeftPlace","innerNavbarNavRightPlace","innerNavbarBrand","optsMDBCarousel","display","active","type","Object","keys","items","map","key","itemMask","captionTextHTML","mdbCarouselItemAttributes","mdbCarouselItemMask","itemId","dangerouslySetInnerHTML","__html","links","to","href","url","name","buttons","buttonConfig","place","mdbNavbarBrand","image","title","Fragment","isOpen","navbar","id","React","Component","Block","render","optsMDBCol","innerImage","Container","FooterPage","fluid","className","md","style","width","social","navbarConfig","require","containerConfig","footerConfig","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d7609eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavbarToggler, MDBCollapse, MDBNavItem, MDBNavLink, MDBMask, MDBView, MDBBtn } from 'mdbreact';\r\nimport { MDBCarousel, MDBCarouselInner, MDBCarouselItem, MDBCarouselCaption } from \"mdbreact\";\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll'\r\n\r\nclass Navbar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      collapse: false,\r\n      isWideEnough: false,\r\n    };\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({\r\n      collapse: !this.state.collapse,\r\n    });\r\n  }\r\n\r\n  componentDidMount = () =>  {\r\n  }\r\n\r\n  render() {\r\n    const { config } = this.props;\r\n    const { mdbNavbarNav } = config;\r\n    const { mdbCarousel } = config;\r\n\r\n    let optsMDBNavbar = config.mdbNavbar;\r\n    let optsMDBNavbarNavLinks;\r\n    let optsMDBNavbarNavButtons;\r\n\r\n    let optsMDBView = config.mdbView;\r\n    let optsMDBMask = config.mdbView.mdbMask.attributes;\r\n\r\n    let innerTextHTMLMDBMask = \"\";\r\n    config.mdbView.mdbMask.innerTextHTML.forEach(string => {\r\n      innerTextHTMLMDBMask += string;\r\n    });\r\n\r\n    let optsMDBCarousel = mdbCarousel.attributes;\r\n\r\n    let displayIntro;\r\n\r\n    let innerNavbarNavLinks;\r\n    let innerNavbarNavButtons;\r\n\r\n    if (config.display.active) {\r\n      if (config.display.type === \"carousel\") {\r\n        displayIntro = (<MDBCarousel {...optsMDBCarousel}>\r\n          <MDBCarouselInner>\r\n            {Object.keys(mdbCarousel.items).map(key => {\r\n              let mdbCarouselItemAttributes = mdbCarousel.items[key].attributes;\r\n              let mdbCarouselItemMask = mdbCarousel.items[key].mdbMask;\r\n              let itemMask;\r\n              let captionTextHTML;\r\n              if (mdbCarouselItemMask) {\r\n                //Agregar Iteraci√≥n para texto\r\n                itemMask = (<MDBMask {...mdbCarouselItemMask.attributes} />);\r\n                if(mdbCarouselItemMask.innerTextHTML){\r\n                  captionTextHTML = mdbCarouselItemMask.innerTextHTML;\r\n                }\r\n              }\r\n              return (\r\n                <MDBCarouselItem key={key} itemId={++key}>\r\n                  <MDBView>\r\n                    <img {...mdbCarouselItemAttributes} />\r\n                    {itemMask}\r\n                  </MDBView>\r\n                  <MDBCarouselCaption dangerouslySetInnerHTML={{ __html: captionTextHTML }}>\r\n                  </MDBCarouselCaption>\r\n                </MDBCarouselItem>\r\n              )\r\n            })}\r\n          </MDBCarouselInner>\r\n        </MDBCarousel>)\r\n      } else {\r\n        displayIntro = (\r\n          <MDBView {...optsMDBView}>\r\n            <MDBMask {...optsMDBMask} dangerouslySetInnerHTML={{ __html: innerTextHTMLMDBMask }}>\r\n            </MDBMask>\r\n          </MDBView>);\r\n      }\r\n    }\r\n\r\n    if (mdbNavbarNav.links) {\r\n\r\n      optsMDBNavbarNavLinks = mdbNavbarNav.links.attributes;\r\n\r\n      innerNavbarNavLinks = (<MDBNavbarNav {...optsMDBNavbarNavLinks}>\r\n        {Object.keys(mdbNavbarNav.links.items).map(key => {\r\n          return (\r\n            <MDBNavItem key={key} active={mdbNavbarNav.links.items[key].active}>\r\n              <MDBNavLink to=\"\"><AnchorLink href={mdbNavbarNav.links.items[key].url}>{mdbNavbarNav.links.items[key].name}</AnchorLink></MDBNavLink>\r\n            </MDBNavItem>\r\n          )\r\n        })}\r\n      </MDBNavbarNav>)\r\n    }\r\n\r\n    if (mdbNavbarNav.buttons) {\r\n\r\n      optsMDBNavbarNavButtons = mdbNavbarNav.buttons.attributes;\r\n\r\n      innerNavbarNavButtons = (<MDBNavbarNav  {...optsMDBNavbarNavButtons}>\r\n        {Object.keys(mdbNavbarNav.buttons.items).map(key => {\r\n          let buttonConfig = mdbNavbarNav.buttons.items[key];\r\n          return (\r\n            <MDBNavItem key={key} active={buttonConfig.active}>\r\n              <MDBBtn {...buttonConfig.attributes}>{buttonConfig.name}</MDBBtn>\r\n            </MDBNavItem>\r\n          )\r\n        })}\r\n      </MDBNavbarNav>)\r\n    }\r\n\r\n    let innerNavbarNavLeftPlace;\r\n    let innerNavbarNavRightPlace;\r\n\r\n    if (mdbNavbarNav.links.place == \"right\") {\r\n      innerNavbarNavRightPlace = innerNavbarNavLinks;\r\n      innerNavbarNavLeftPlace = innerNavbarNavButtons;\r\n    } else {\r\n      innerNavbarNavRightPlace = innerNavbarNavButtons;\r\n      innerNavbarNavLeftPlace = innerNavbarNavLinks;\r\n    }\r\n\r\n    let innerNavbarBrand;\r\n    if(config.mdbNavbarBrand.image){\r\n      innerNavbarBrand = (<img {...config.mdbNavbarBrand.image.attributes}/>);\r\n    }else{\r\n      innerNavbarBrand = (<strong>{config.mdbNavbarBrand.title}</strong>);\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <Router>\r\n          <MDBNavbar {...optsMDBNavbar}>\r\n            <MDBNavbarBrand href=\"/\"> {/*Agregar a configuraci√≥n */}\r\n              {innerNavbarBrand}\r\n            </MDBNavbarBrand>\r\n            {!this.state.isWideEnough && <MDBNavbarToggler onClick={this.onClick} />}\r\n            <MDBCollapse isOpen={this.state.collapse} navbar>\r\n              {innerNavbarNavLeftPlace}\r\n              {innerNavbarNavRightPlace}\r\n            </MDBCollapse>\r\n          </MDBNavbar>\r\n        </Router>\r\n        <section id={'home'}>\r\n        {displayIntro}\r\n        </section>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport { MDBCol, MDBCardImage } from \"mdbreact\";\r\n\r\nclass Block extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({});\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n  }\r\n\r\n  render = () => {\r\n\r\n    const { config } = this.props;\r\n    let optsMDBCol  = config.attributes;\r\n    \r\n    if(config.innerImage){\r\n        let { attributes } = config.innerImage;\r\n        return (\r\n             <MDBCol {...optsMDBCol}>\r\n                   <MDBCardImage {...attributes}></MDBCardImage>\r\n             </MDBCol>\r\n        );\r\n    }else{\r\n        let innerTextHTML = \"\";\r\n        config.innerTextHTML.forEach(string => {\r\n          innerTextHTML += string;\r\n        });\r\n\r\n        return (\r\n             <MDBCol {...optsMDBCol} dangerouslySetInnerHTML={{ __html: innerTextHTML }}></MDBCol>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default Block;","import React from 'react';\r\nimport { MDBRow } from \"mdbreact\";\r\nimport Block from \"./mdb-block\";\r\n\r\nclass Container extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n    };\r\n\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick() {\r\n    this.setState({});\r\n  }\r\n\r\n  componentDidMount = () => {\r\n\r\n  }\r\n\r\n  render = () => {\r\n\r\n    const { config } = this.props;\r\n    const { items } = config;\r\n\r\n    return (\r\n      \r\n        <MDBRow>\r\n        \r\n        {Object.keys(items).map(key => {\r\n            return (\r\n            <Block key={key} config={items[key]}></Block>\r\n            )\r\n        })}\r\n         \r\n        </MDBRow>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Container;","import React from \"react\";\r\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll'\r\n\r\nclass FooterPage extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            collapse: false,\r\n            isWideEnough: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n    }\r\n\r\n    render = () => {\r\n        const { config } = this.props;\r\n        let innerTextHTML = \"\";\r\n        config.innerTextHTML.forEach(string => {\r\n            innerTextHTML += string;\r\n        });\r\n\r\n        return (\r\n            <MDBFooter {...config.attributes}>\r\n                <MDBContainer fluid className=\"text-center text-md-left\">\r\n                    <MDBRow>\r\n                        <MDBCol md=\"6\">\r\n                            <h6 className=\"font-weight-bold\">\r\n                                <strong>{config.title}</strong>\r\n                            </h6>\r\n                            <hr className={'deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto'} style={{width: 60}}></hr>\r\n                            <div dangerouslySetInnerHTML={{ __html: innerTextHTML }}></div>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"3\">\r\n                            <h6 className=\"font-weight-bold\">\r\n                                <strong>{config.links.title}</strong>\r\n                            </h6>\r\n                            <hr className={'deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto'} style={{width: 60}}></hr>\r\n                            <ul {...config.links.attributes}>\r\n                                {Object.keys(config.links.items).map(key => {\r\n                                    return (\r\n                                        <li key={key} className=\"list-unstyled\">\r\n                                            <AnchorLink href={config.links.items[key].url}>{config.links.items[key].name}</AnchorLink>\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                            </ul>\r\n                        </MDBCol>\r\n                        <MDBCol md=\"3\">\r\n                            <h6 className=\"font-weight-bold\">\r\n                                <strong>{config.social.title}</strong>\r\n                            </h6>\r\n                            <hr className={'deep-purple accent-2 mb-4 mt-0 d-inline-block mx-auto'} style={{width: 60}}></hr>\r\n                            <ul {...config.social.attributes}>\r\n                            {Object.keys(config.social.items).map(key => {\r\n                                    return (\r\n                                        <li key={key} className=\"Footer-item list-unstyled col-4\">\r\n                                            <a className=\"Footer-link waves-effect waves-light\"><i className={\"fab \" + config.social.items[key].className}></i></a>\r\n                                        </li>\r\n                                    )\r\n                                })}\r\n                                </ul>\r\n                        </MDBCol>\r\n                    </MDBRow>\r\n                </MDBContainer>\r\n                <div className=\"footer-copyright text-center py-3\">\r\n                    <MDBContainer fluid>\r\n                        {/* &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.MDBootstrap.com\"> MDBootstrap.com </a> */}\r\n                    </MDBContainer>\r\n                </div>\r\n            </MDBFooter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FooterPage;","import React, { Component } from 'react';\nimport Navbar from './components/mdb-navbar';\nimport Container from './components/mdb-container';\nimport FooterPage from './components/mdb-footer';\n\nconst navbarConfig = require(\"./config/config-navbar.json\");\nconst containerConfig = require('./config/config-container.json');\nconst footerConfig = require(\"./config/config-footer.json\");\n\nclass App extends Component {\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <Navbar config={navbarConfig}></Navbar>\n        </header>\n        <main className=\"App\">\n          <Container config={containerConfig}></Container>\n        </main>\n        <footer>\n        <FooterPage  config={footerConfig}></FooterPage>\n        </footer>\n      </React.Fragment>\n\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}